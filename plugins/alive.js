const { cmd } = require("../command");
const config = require("../settings");
const prefix = config.PREFIX || ".";

cmd(
  {
    pattern: "alive",
    alias: ["status"],
    desc: "Check if the bot is alive",
    category: "main",
    react: "üë®‚Äçüíª",
    filename: __filename,
  },
  async (
    conn,
    mek,
    m,
    { from, pushname, reply }
  ) => {
    try {
      let currentHour = new Date().getHours();
      let greeting;
      if (currentHour >= 5 && currentHour < 12) {
        greeting = "üåÖ *Good Morning!*";
      } else if (currentHour >= 12 && currentHour < 17) {
        greeting = "üåû *Good Afternoon!*";
      } else if (currentHour >= 17 && currentHour < 20) {
        greeting = "üåÜ *Good Evening!*";
      } else {
        greeting = "üåô *Good Night!*";
      }

      let cap = `${greeting}  
‚ï≠‚îÄ‚îÅ‚îÅ‚ù∞ *üëã  ú·¥á ü ü·¥è, ${pushname}!* ‚ù±‚îÅ‚îÅ‚îÄ‚ïÆ  
|
| * * ô·¥è·¥õ …¥·¥Ä·¥ç·¥á = Íú± ú·¥ÄÍú±…¥…™ ·¥ç·¥Ö*
| * *·¥è·¥°…¥·¥á Ä …¥·¥Ä·¥ç·¥á = ·¥Ö·¥á…¥·¥ú·¥°·¥Ä…¥ ·¥ã·¥Ä·¥úÍú± ú…™·¥ã·¥Ä
| * *·¥è·¥°…¥·¥á Ä …¥·¥ú·¥ç ô·¥á Ä = 94704463479
| 
| *·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è ·¥†1 updateüîÆ*

‚îÇ ‚Ä¢‚Ä¢‚Ä¢·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á  ô·¥Ä·¥Ñ·¥ã ·¥õ·¥è ·¥ç è  ô·¥è·¥õ‚Ä¢‚Ä¢‚Ä¢
‚îÇ ü§î *…™ ·¥Ä·¥ç ·¥Ä ü…™·¥†·¥á …¥·¥á·¥°..?* üíù  
‚îÇ    _‡∂∏‡∑ú‡∂ö‡∂Ø ‡∑Ä‡∑ô‡∂±‡∑ä‡∂±‡∑ô ‡∂â‡∂≠‡∑í‡∂±‡∑ä ‡∑Ñ‡∑ä?_ üòÆ‚Äçüí®  
‚îÇ  
‚îÇ üéØ *·¥ä·¥è…™…¥ ·¥ç è ·¥° ú·¥Ä·¥õÍú±·¥Ä·¥ò·¥ò ·¥Ñ ú·¥Ä…¥…¥·¥á ü:*  
‚îÇ    üöÄ *.channel* ‚Äì *·¥ä·¥è…™…¥ …¥·¥á·¥°.!* ü§´  
‚îÇ  
‚îÇ üìú *Commands Panel ‡∂ë‡∂ö ‡∂ú‡∂±‡∑ä‡∂±:*  
‚îÇ    ‚ö° *.menu* ‚Äì *commands ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±!*  
‚îÇ  
‚îÇ üëë *Owner‡∑Ä contact ‡∂ö‡∂ª‡∂ú‡∂±‡∑ä‡∂±:*  
‚îÇ    üìû *.owner* ‚Äì *94704463479* ü´£  
‚îÇ  ‚îÅ Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö ‚îÅ
‚ï∞‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ù∞ *·¥õ ú·¥Ä…¥·¥ã  è·¥è·¥ú!* ‚ù±‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚ïØ  
         ‚õ¶ *·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö* ‚õ¶`;

      let thumbnail = "https://telegra.ph/file/f9e89a0a1779ee1199c29.jpg"; // default image

      if (config.MODE === 'nonbutton') {
        const sections = [
          {
            title: "",
            rows: [
              { title: "1", rowId: `${prefix}menu`, description: '`‚ù≤ ùôºùô¥ùôΩùöÑ ùôøùô∞ùôΩùôΩùô¥ùôª ‚ù≥` üéß' },
              { title: "2", rowId: `${prefix}ping`, description: '`‚ù≤ ùô±ùôæùöÉ ùöÇùôøùô¥ùô¥ùô≥ ‚ù≥` üìÑ' },
            ]
          }
        ];
        const listMessage = {
          caption: cap,
          image: { url: thumbnail },
          footer: '> „ÄΩÔ∏èade By Dinuwh Bbh',
          title: '',
          buttonText: '> *`‚óé_Reply Below Number_‚óé`*',
          sections
        };

        return await conn.sendMessage(from, listMessage, { quoted: mek });

      } else if (config.MODE === 'button') {
        const listData = {
          title: "‚óé BOT INFO ‚óé",
          sections: [{
            title: "DINUWH MD OPTIONS",
            rows: [
              {
                title: "[Audio üéß]",
                description: "Download as audio\n„ÄΩÔ∏èade By Dinuwh Bbh",
                id: `${prefix}ytaud https://youtube.com/shorts/example`
              },
              {
                title: "[Document üìÅ]",
                description: "Download as document\n„ÄΩÔ∏èade By Dinuwh Bbh",
                id: `${prefix}ytdoc https://youtube.com/shorts/example`
              }
            ]
          }]
        };

        return await conn.sendMessage(from, {
          image: { url: thumbnail },
          caption: cap,
          footer: "> „ÄΩÔ∏èade By Dinuwh Bbh",
          buttons: [
            {
              buttonId: `${prefix}ping`,
              buttonText: { displayText: "`[BOT PING]`" },
              type: 1
            },
            {
              buttonId: `${prefix}menu`,
              buttonText: { displayText: "`[MENU PANNEL]`" },
              type: 1
            },
            {
              buttonId: "action",
              buttonText: { displayText: "üîò Choose Song Type" },
              type: 4,
              nativeFlowInfo: {
                name: "single_select",
                paramsJson: JSON.stringify(listData),
              },
            },
          ],
          headerType: 1,
          viewOnce: true,
        }, { quoted: mek });
      }

    } catch (e) {
      console.error(e);
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);
