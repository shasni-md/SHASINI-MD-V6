const { cmd } = require('../command');
const axios = require('axios');

cmd({
    pattern: "tt",
    alias: ["tiktok"],
    react: "üé¨",
    desc: "Download TikTok video using the provided URL",
    category: "download",
    filename: __filename
}, async (conn, mek, m, { from, reply, args }) => {
    try {
        // Check if URL is provided
        if (!args[0]) {
            return await reply("*üìå ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥ú Ä ü üòë‚úåÔ∏è.*");
        }

        const tiktokUrl = args[0];
        const apiUrl = `https://manul-official-api.vercel.app/scrape-tiktok?url=${encodeURIComponent(tiktokUrl)}&apikey=Manul-Official`;

        // Send request to the API
        const response = await axios.get(apiUrl);

        // Check if the response is successful
        if (response.data.status) {
            const data = response.data.data.data;

            // Prepare the message with video details and options
            const message = `üé¨ ‚áº‚õö Íú± ú·¥ÄÍú±…¥…™ ·¥ç·¥Ö ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥á Ä ‚õö‚áº  

‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ‚ÑπÔ∏è  è·¥è·¥ú Ä ·¥õ…™·¥ã·¥è·¥ã ·¥†…™ Ä·¥á·¥è 
üìå *Title:* ${data.title}  
üë§ *Author:* ${data.author}  
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ  

üí† *·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥õ…™·¥ã·¥õ·¥è·¥ã ·¥†…™·¥Ö·¥á·¥è ·¥è·¥ò·¥õ…™·¥è…¥Íú± !*  

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  
   üì• *Download Options:*  
   1Ô∏è‚É£ * ú·¥Ö ·¥†…™Íú∞·¥á·¥è*  
   2Ô∏è‚É£ *Íú±·¥Ö ·¥†…™·¥Ö·¥á·¥è*  
   3Ô∏è‚É£ *MP3 (Audio)*  
   4Ô∏è‚É£ *Thumbnail*  
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  

‚ö° *Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö  ô è ·¥Ö·¥á…¥·¥ú·¥°·¥Ä…¥ ·¥ã·¥Ä·¥úÍú± ú…™·¥ã·¥Ä* 
üî• *owner number = +94704463479 ‚úåÔ∏è*`;

            // Send the message and save the message ID
            const sentMsg = await conn.sendMessage(from, { image: { url: data.thumbnail }, caption: message }, { quoted: mek });
            const messageID = sentMsg.key.id; // Save the message ID for later reference

            // Listen for the user's response
            conn.ev.on("messages.upsert", async (messageUpdate) => {
                const mek = messageUpdate.messages[0];
                if (!mek.message) return;
                const messageType =
                    mek.message.conversation ||
                    mek.message.extendedTextMessage?.text;
                const from = mek.key.remoteJid;

                // Check if the message is a reply to the previously sent message
                const isReplyToSentMsg =
                    mek.message.extendedTextMessage &&
                    mek.message.extendedTextMessage.contextInfo.stanzaId ===
                        messageID;

                if (isReplyToSentMsg) {
                    // React to the user's reply
                    await conn.sendMessage(from, {
                        react: { text: "üåü", key: mek.key },
                    });

                    switch (messageType) {
                        case '1':
                            // Handle option 1 (No Watermark Video)
                            await conn.sendMessage(
                                from,
                                { video: { url: data.nowm }, caption: "üì• * è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è Íú±·¥á…¥·¥Ö ·¥Ö·¥è…¥·¥á!*\nüî• > Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö  ô è ·¥Ö·¥á…¥·¥ú·¥°·¥Ä…¥ ·¥ã·¥Ä·¥úÍú± ú…™·¥ã·¥Ä" },
                                { quoted: mek }
                            );
                            break;
                        case '2':
                            // Handle option 2 (Watermark Video)
                            await conn.sendMessage(
                                from,
                                { video: { url: data.watermark }, caption: "üì• ** è·¥è·¥ú Ä Íú±·¥Ö ·¥†…™·¥Ö·¥á·¥è Íú±·¥á…¥·¥Ö ·¥Ö·¥è…¥·¥á*\nüî• > Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö  ô è ·¥Ö·¥á…¥·¥ú·¥°·¥Ä…¥ ·¥ã·¥Ä·¥úÍú± ú…™·¥ã·¥Ä" },
                                { quoted: mek }
                            );
                            break;
                        case '3':
                            // Handle option 3 (Audio)
                            await conn.sendMessage(
                                from,
                                { audio: { url: data.audio }, mimetype: 'audio/mp4', caption: "üéµ * è·¥è·¥ú Ä TikTok Audio Íú±·¥è…¥·¥Ö ·¥Ö·¥è…¥·¥á!*\nüî• > Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö  ô è ·¥Ö·¥á…¥·¥ú·¥°·¥Ä…¥ ·¥ã·¥Ä·¥úÍú± ú…™·¥ã·¥Ä" },
                                { quoted: mek }
                            );
                            break;
                        case '4':
                            // Handle option 4 (Thumbnail)
                            await conn.sendMessage(
                                from,
                                { image: { url: data.thumbnail }, caption: "üì∏ **‡∂∏‡∑ô‡∂±‡∑ä‡∂± Thumbnail ‡∂ë‡∂ö!**\nüî• *Powered by Íú± ú·¥ÄÍú±…¥…™-·¥ç·¥Ö*" },
                                { quoted: mek }
                            );
                            break;
                        default:
                            // Handle invalid input (not 1, 2, 3, or 4)
                            await conn.sendMessage(from, {
                                react: { text: "‚ùì", key: mek.key },
                            });
                            await reply("‚ùå *‡∂∏‡∂†‡∂Ç, 1 - 4 ‡∂Ö‡∂≠‡∂ª ‡∂â‡∂Ω‡∂ö‡∑ä‡∂ö‡∂∏‡∑ä ‡∑Ä‡∂Ω‡∑í‡∂±‡∑ä ‡∂ª‡∑í‡∂¥‡∑ä‡∂Ω‡∂∫‡∑í ‡∂ö‡∂ª‡∂±‡∑ä‡∂±! üòë*");
                            break;
                    }

                    // React to the successful completion of the task
                    await conn.sendMessage(from, {
                        react: { text: "‚úÖ", key: mek.key },
                    });

                    // Clear the stored TikTok data
                    delete conn.tiktokData;
                }
            });
        } else {
            await reply("‚ùå *‡∂∂‡∂Ç, ‡∂∏‡∑ö TikTok ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö ‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í‡∂Ø ‡∂∏‡∂†‡∂Ç? ü§î*");
        }
    } catch (error) {
        console.error("Error fetching TikTok video:", error);

        // Enhanced funny error messages in Sinhala
        if (error.response) {
            await reply(`‚ùå *‡∂Ö‡∂∫‡∑í‡∂∫‡∑ù! TikTok ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∑ô‡∂±‡∑ä ‡∂Ø‡∑ô‡∂∫‡∂ö‡∑ä ‡∂Ö‡∂ª‡∂±‡∑ä ‡∂±‡∑ë ‡∂∂‡∂Ç üò≠*`);
        } else if (error.request) {
            await reply("‚ùå *‡∂Ö‡∂¥‡∑ù! ‡∂á‡∂∫‡∑í ‡∂±‡∑ö‡∂ß‡∑ä ‡∂ë‡∂ö ‡∂¥‡∂ß‡∑ä‡∂ß ‡∑Ä‡∂ª‡∂Ø‡∑í‡∂∫‡∑í? ü§¶‚Äç‚ôÇÔ∏è*");
        } else {
            await reply(`‚ùå *‡∂Ö‡∂±‡∑ö ‡∂∏‡∂†‡∂Ç, ‡∂ë‡∂ö‡∂ö‡∑ä‡∂∏ Error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ö‡∑Ä‡∑è üòëüëâ ${error.message}*`);
        }
    }
});
