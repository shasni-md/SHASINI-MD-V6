const { cmd, commands } = require("../command");
const yts = require("yt-search");
const { ytmp3 } = require("@vreden/youtube_scraper");

cmd(
  {
    pattern: "vre",
    alias: "ytmp3",
    react: "üéµ",
    desc: "Download Song",
    category: "download",
    filename: __filename,
  },
  async (
    robin,
    mek,
    m,
    {
      from,
      quoted,
      body,
      isCmd,
      command,
      args,
      q,
      isGroup,
      sender,
      senderNumber,
      botNumber2,
      botNumber,
      pushname,
      isMe,
      isOwner,
      groupMetadata,
      groupName,
      participants,
      groupAdmins,
      isBotAdmins,
      isAdmins,
      reply,
    }
  ) => {
    try {
      if (!q) return reply("‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∂ª‡∑í ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∑Ñ‡∂ª‡∑í ‡∂Ø‡∑ô‡∂±‡∑ä‡∂± üåö‚ù§Ô∏è");

      const search = await yts(q);
      if (!search.videos.length) return reply("‚ùå Video not found!");

      const data = search.videos[0];
      const url = data.url;

      const desc = `„Ä≤üé∂ùôΩùôæùöÜ ùöÑùôøùôªùôæùô∞ùô≥ùô∏ùôΩùô∂ ùöÇùôæùôΩùô∂üëÜ...„ãû||üïäÔ∏è

‚ôß ||ùöÉùô∏ùôºùô¥    : *${data.timestamp}*      
‚ô¢ ||ùöÑùôøùôªùôæùô∞ùô≥  : *${data.ago}*
‚ô° ||ùöÖùô∏ùô¥ùöÜùöÇ   : *${data.views}*
‚ô§ ||ùöÑùöÅùôª     : *${data.url}*
> //#DŒπŒ∑·µ§W üÖ±üÖ±üÖ∑ „ãõ‚òö
____ *||"üíóü©∑üíôüíöüñ§" üëà||‡∂∏‡∑ö‡∑Ä‡∂ú‡∑ô‡∂±‡∑ä ‡∂ª‡∑í‡∂∫‡∑ê‡∂ö‡∑ä‡∂ß‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∑Ñ‡∑ä ‡∑Ö‡∂∏‡∂∫‡∑ù...üòöüíñ*

* *üñáÔ∏èALL MUSIC PLAY LIST üëá*
_https://whatsapp.com/channel/0029Vb3mqn5H5JLuJO3s3Z1J/2311_`;

      // Send thumbnail + metadata
      await robin.sendMessage(
        from,
        {
          image: { url: data.thumbnail },
          caption: desc,
        },
        { quoted: mek }
      );

      // Download song (only send as PTT)
      const quality = "64";
      const songData = await ytmp3(url, quality);

      if (!songData || !songData.download || !songData.download.url) {
        return reply("‚ùå Failed to download the song!");
      }

      let durationParts = data.timestamp.split(":").map(Number);
      let totalSeconds =
        durationParts.length === 3
          ? durationParts[0] * 3600 + durationParts[1] * 60 + durationParts[2]
          : durationParts[0] * 60 + durationParts[1];

      if (totalSeconds > 1800) {
        return reply("‚è±Ô∏è Audio limit is 30 minutes!");
      }

      await robin.sendMessage(
        from,
        {
          audio: { url: songData.download.url },
          mimetype: "audio/mpeg",
          ptt: true,
        },
        { quoted: mek }
      );
    } catch (e) {
      console.error(e);
      reply(`‚ùå Error: ${e.message}`);
    }
  }
);
